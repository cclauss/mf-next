[buildout]
extends = CONST_buildout.cfg
parts += jshint cssbuild-closure cssbuild-ol3 download-closure-compiler closure-depswriter-ol3 closure-depswriter-ga closure-compile-api closure-compile-sample-app

[versions]
# list of the dependencies versions
# (to be copied from the dumppickedversions output)
c2c.recipe.closurecompile = 0.3.3

[vars]
# apache
instanceid = main
apache-entry-point = /${vars:instanceid}/wsgi
# urls
host = mf-next.bgdi.admin.ch
ga-webservice-url = //api.geo.admin.ch
# database - not in this file.....

# compilations
compresscss = true
# output mode for closure compiler output. 'script' for single file, 'compiled' for compressed single file
closure-output-mode = compiled
# WHITESPACE_ONLY , SIMPLE_OPTIMIZATIONS (comparable, but better to jsbuild), ADVANCED_OPTIMIZATIONS (special coding guidelines need to be followed, externs defined, for this to work)
closure-compile-level = SIMPLE_OPTIMIZATIONS

[closure-depswriter-ol3]
recipe = c2c.recipe.closurecompile:depswriter
#prefix should be relative to the base.js file of closure
root_with_prefix = geoadmin/static/lib/ol3/src ../../../ol3/src
output = geoadmin/static/build/ol3_deps.js

[closure-depswriter-ga]
recipe = c2c.recipe.closurecompile:depswriter
#prefix should be relative to the base.js file of closure
root_with_prefix = geoadmin/static/lib/geoadmin/src ../../../geoadmin/src
output = geoadmin/static/build/ga_deps.js

#geoadmin library compilation. This is how we will build our api.js file
[closure-compile-api]
recipe = c2c.recipe.closurecompile
compiler = ${download-closure-compiler:destination}/compiler.jar
level = ${vars:closure-compile-level}
# source maps might be usefull in the future to be able to debug in production. 
# source_map = foo/bar.map
#define externs not to be optimised away
externs = geoadmin/static/lib/ol3/externs/proj4js.js
root = geoadmin/static/lib/closure geoadmin/static/lib/ol3/src geoadmin/static/lib/geoadmin/src/ga
input = geoadmin/static/lib/geoadmin/src/geoadmin.js
#output = geoadmin/static/build/ga.js
output = geoadmin/static/build/geoadmin.js
namespace = ga
output_mode = ${vars:closure-output-mode}
compiler_flags = --generate_exports


#for testing an example...this is how we would build our app.js file
[closure-compile-sample-app]
recipe = c2c.recipe.closurecompile
compiler = ${download-closure-compiler:destination}/compiler.jar
level = ${vars:closure-compile-level}
# source maps might be usefull in the future to be able to debug in production. 
# source_map = foo/bar.map
#define externs not to be optimised away
externs = geoadmin/static/lib/ol3/externs/proj4js.js
root = geoadmin/static/lib/closure geoadmin/static/lib/ol3/src geoadmin/static/lib/geoadmin/src/ga
input = geoadmin/static/lib/geoadmin/examples/sample.js
#output = geoadmin/static/build/ga.js
output = geoadmin/static/build/sample-app.js
namespace = ga.examples.sample
output_mode = ${vars:closure-output-mode}

[download-closure-compiler]
recipe = hexagonit.recipe.download
url = http://closure-compiler.googlecode.com/files/compiler-latest.zip
destination = ${buildout:bin-directory}


#those css buids should be replaced by closure compiled css
[cssbuild-ol3]
recipe = c2c.recipe.cssmin
input = 
  geoadmin/static/lib/ol3/css/ol.css
output = geoadmin/static/build/ol3.css
compress = ${vars:compresscss}


[cssbuild-closure]
recipe = c2c.recipe.cssmin
input = 
  geoadmin/static/lib/closure/closure/goog/css/tree.css
output = geoadmin/static/build/closure.css
compress = ${vars:compresscss}

[jshint]
recipe = cp.recipe.cmd
install_cmd = find geoadmin/static/lib/geoadmin -name "*.js" -print0 | xargs -0 -I {} jshint --config geoadmin/static/lib/geoadmin/jshint.cfg  {}
update_cmd = ${jshint:install_cmd}

