[buildout]
extends = CONST_buildout.cfg
parts += node-modules project-directories jshint cssbuild-closure cssbuild-ol3 cssbuild-ga download-closure-compiler closure-depswriter-ol3 closure-depswriter-ga closure-create-exports closure-compile-api fix-source-map-api closure-compile-sample-app fix-source-map-sample-app po2mo js-tests-debug js-tests

[versions]
# list of the dependencies versions
# (to be copied from the dumppickedversions output)
c2c.recipe.closurecompile = 0.3.3

[vars]
# apache
instanceid = main
dbuser = www-data
apache-entry-point = /${vars:instanceid}/wsgi
# urls
host = mf-next.bgdi.admin.ch
ga-webservice-url = //api.geo.admin.ch
# database - not in this file.....

# compilations
compresscss = true
# output mode for closure compiler output. 'script' for single file, 'compiled' for compressed single file
closure-output-mode = compiled
# WHITESPACE_ONLY , SIMPLE_OPTIMIZATIONS (comparable, but better to jsbuild), ADVANCED_OPTIMIZATIONS (special coding guidelines need to be followed, externs defined, for this to work)
closure-compile-level = ADVANCED_OPTIMIZATIONS

exports-target = geoadmin/static/build/exports/exports.js
export-key = ga_api_exports

[project-directories]
recipe = z3c.recipe.mkdir
paths =  geoadmin/static/build/exports

[node-modules]
recipe = cp.recipe.cmd
install_cmd = 
            cd buildout
            npm install jshint karma

[closure-depswriter-ol3]
recipe = c2c.recipe.closurecompile:depswriter
#prefix should be relative to the base.js file of closure
root_with_prefix = geoadmin/static/lib/ol3/src ../../../ol3/src
output = geoadmin/static/build/ol3_deps.js

[closure-depswriter-ga]
recipe = c2c.recipe.closurecompile:depswriter
#prefix should be relative to the base.js file of closure
root_with_prefix = geoadmin/static/lib/geoadmin/src ../../../geoadmin/src
output = geoadmin/static/build/ga_deps.js

[closure-create-exports]
recipe = cp.recipe.cmd
install_cmd = find geoadmin/static/lib/geoadmin/src/ga -name "*.exports" -print0 | xargs -0 -I {} geoadmin/static/lib/ol3/bin/generate-exports.py --exports {} > ${vars:exports-target} && echo "goog.exportSymbol('ga',ga);" >> ${vars:exports-target} && echo "goog.provide('${vars:export-key}');" >> ${vars:exports-target}
update_cmd = ${closure-create-exports:install_cmd}

#geoadmin library compilation. This is how we will build our api.js file
[closure-compile-api]
recipe = c2c.recipe.closurecompile
compiler = ${download-closure-compiler:destination}/compiler.jar
level = ${vars:closure-compile-level}
externs = geoadmin/static/lib/ol3/externs/proj4js.js
root = geoadmin/static/lib/closure geoadmin/static/lib/ol3/src geoadmin/static/lib/geoadmin/src
input = ${vars:exports-target}
output = geoadmin/static/build/geoadmin.js
namespace = ${vars:export-key}
output_mode = ${vars:closure-output-mode}
# source maps might be usefull in the future to be able to debug in production. 
source_map = geoadmin/static/build/geoadmin.js.map
compiler_flags = --source_map_format=V3
#compiler_flags = --generate_exports

[fix-source-map-api]
recipe = cp.recipe.cmd
install_cmd = 
            grep -o -P '(?<="file":").*(?=build/geoadmin.js)' geoadmin/static/build/geoadmin.js.map > temp.txt
            sed -i 's/\//\\\//g' temp.txt
            myvar=`cat temp.txt`
            rm temp.txt
            myfirstvar='"file":"'$myvar
            sed -i "s/$myfirstvar/\"file\":\"..\//g" geoadmin/static/build/geoadmin.js.map
            sed -i "s/$myvar/..\//g" geoadmin/static/build/geoadmin.js.map
            echo "//@ sourceMappingURL=geoadmin.js.map" >> geoadmin/static/build/geoadmin.js
update_cmd = ${fix-source-map-api:install_cmd}

#for testing an example...this is how we would build our app.js file
[closure-compile-sample-app]
recipe = c2c.recipe.closurecompile
compiler = ${download-closure-compiler:destination}/compiler.jar
level = ${vars:closure-compile-level}
# source maps might be usefull in the future to be able to debug in production. 
# source_map = foo/bar.map
#define externs not to be optimised away
externs = geoadmin/static/lib/ol3/externs/proj4js.js
root = geoadmin/static/lib/closure geoadmin/static/lib/ol3/src geoadmin/static/lib/geoadmin/src/ga
input = geoadmin/static/lib/geoadmin/examples/sample.js
#output = geoadmin/static/build/ga.js
output = geoadmin/static/build/sample-app.js
source_map = geoadmin/static/build/sample-app.js.map
namespace = ga.examples.sample
output_mode = ${vars:closure-output-mode}

[fix-source-map-sample-app]
recipe = cp.recipe.cmd
install_cmd = 
            grep -o -P '(?<="file":").*(?=build/sample-app.js)' geoadmin/static/build/sample-app.js.map > temp.txt
            sed -i 's/\//\\\//g' temp.txt
            myvar=`cat temp.txt`
            rm temp.txt
            myfirstvar='"file":"'$myvar
            sed -i "s/$myfirstvar/\"file\":\"..\//g" geoadmin/static/build/sample-app.js.map
            sed -i "s/$myvar/..\//g" geoadmin/static/build/sample-app.js.map
            echo "//@ sourceMappingURL=sample-app.js.map" >> geoadmin/static/build/sample-app.js
update_cmd = ${fix-source-map-sample-app:install_cmd}

[download-closure-compiler]
recipe = hexagonit.recipe.download
url = http://closure-compiler.googlecode.com/files/compiler-latest.zip
destination = ${buildout:bin-directory}

#those css buids should be replaced by closure compiled css
[cssbuild-ol3]
recipe = c2c.recipe.cssmin
input = 
  geoadmin/static/lib/ol3/css/ol.css
output = geoadmin/static/build/ol3.css
compress = ${vars:compresscss}

[cssbuild-closure]
recipe = c2c.recipe.cssmin
input = 
  geoadmin/static/lib/closure/closure/goog/css/tree.css
output = geoadmin/static/build/closure.css
compress = ${vars:compresscss}

[cssbuild-ga]
recipe = c2c.recipe.cssmin
input = 
  geoadmin/static/lib/geoadmin/css/ga.css
  geoadmin/static/lib/geoadmin/css/profile.css
output = geoadmin/static/build/ga.css
compress = ${vars:compresscss}


[jshint]
recipe = cp.recipe.cmd
install_cmd = find geoadmin/static/lib/geoadmin -name "*.js" -print0 | xargs -0 -I {} buildout/node_modules/jshint/bin/jshint --config geoadmin/static/lib/geoadmin/jshint.cfg  {}
update_cmd = ${jshint:install_cmd}

[js-tests]
recipe = cp.recipe.cmd
install_cmd = ./buildout/node_modules/karma/bin/karma start geoadmin/static/lib/geoadmin/test/karma_conf.js --single-run
update_cmd = ${js-tests:install_cmd}

[js-tests-debug]
recipe = cp.recipe.cmd
install_cmd = ./buildout/node_modules/karma/bin/karma start geoadmin/static/lib/geoadmin/test/karma_conf_debug.js --single-run
update_cmd = ${js-tests:install_cmd}

[po2mo]
recipe = c2c.recipe.msgfmt
po-directory = geoadmin/locale/

[potranslate]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    ${buildout:bin-directory}/python ${buildout:directory}/translations/translation2po.py ${buildout:directory}/geoadmin/locale/
